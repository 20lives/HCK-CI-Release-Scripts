AutoHCK
-------
AutoHCK is a tool for automating HCK/HLK testing, it will do all the boilerplate steps in the process leaving you only with choosing a driver and an OS.

Components
----------
AutoHCK consists of the following components:

* AutoHCK -  automation manager that uses other components to orchestrate the VMs and networking configuration, setup and execute tests and gather results.
* VirtHCK - host component that manages orchestration of the VMs and networking configuration needed for HCK setups
* toolsHCK - VM component PowerShell script that uses HCK\HLK API to control the HCK Studio
* rToolsHCK - host component that manages communication between the VMs used for HCK test and the host, remotely controls HCK\HLK studio using toolsHCK
* OpenDHCPserver - host component used to provide unique IP addresses local to the host for the HCK Studio VMs
* Configuration and setup scripts - used to setup the host and the guest

Archive content
---------------
* AutoHCK - Main script for the automation framework including latest hlkplaylists and hckfilters.
* VirtHCK - Dependency used by AutoHCK
* OpenDHCPServerSetup - Configuration script for openDHCP server
* HLK-Setup-Scripts - Scripts for creating new studio and clients machine images.
* gems - Ruby dependencies needed including rToolsHCK
* toolsHCK - PowerShell script used by rToolsHCK

Deployment
----------
* Check that you have ruby installed on the host. Ruby installation instructions (better use RVM): https://rvm.io
We tested on 2.4.3 and we assume it can work on later versions as well.

* Extract the archive to HCK_CI directory

* Open Install.sh file and update the configurable values.

* Run ./Install.sh, the installation will do the following:
  1. Copy package to destination folder.
  2. Install gem dependencies.
  3. Clone and compile QEMU.
  4. Configure base parameters in AutoHCK config.json file

Dropbox integration
-------------------
Auto_hck allows integration with Dropbox, automatically uploading results and logs to specific location.
to do that you will need to create auth2 token
1. Go to https://www.dropbox.com/developers/apps and click on 'Create app'
2. Select 'Dropbox API', 'Full Dropbox' access type and give it a unique name.
3. Click on 'Generated access token'.
4. Copy the token to the installation script under DROPBOX_TOKEN.

Github integration
------------------
When specifing a pull request auto_hck can mark test results on github and link to dropbox logs folder.
to do that you will need to create a personal access token.
1. Go to https://github.com/settings/tokens and click on 'Generate new token'
2. Give it a name, select: repo:status and click 'Generate token'
3. Copy the token and username to the installation script under GITHUB_USER GITHUB_TOKEN.


Images preperation
------------------
This is similar to making regular HLK/HCK studio and clients images with with few additionals configurations, scripts with detailed instructions available at HCK_CI/HLK-Setup-Scripts/.
place the finalized images in the HCK_CI/images folder. 

Configuration
---------------------
In the `config.json` you can configure the following:

* ip_segment - Change that if you configured the DHCP server to use something other than 192.168.0.X
* dhcp_bridge - Set the name of the bridge used by the DHCP server
* id_range": - List of the VirtHCK ids available to be used.
* studio_username/studio_password - The credentials used in the studio and clients machines 
* repository, github_credentials - Tepository name and credentials used on the github integrations
* dropbox_token - Used for uploading logs and results to remote dropbox folder

### Microsoft HCK filters
Filters are fixes for problematic tests, read more at: [Microsoft HLK Filters](https://docs.microsoft.com/en-us/windows-hardware/test/hlk/user/windows-hardware-lab-kit-filters)
To update the supplied filters run HCK_CI/AutoHCK/filters/update.sh

### Microsoft HLK playlists
To run HLK tests with latest Microsoft compatibility playlist [HLK Playlists](https://github.com/HCK-CI/hlkplaylists) run HCK_CI/AutoHCK/playlists/update.sh

### Sudoer with no password
To run auto_hck correctly the runnig user should have permission to run sudo commands without prompting his password, do this by adding the following line to sudoers file /etc/sudoers
__This might be dangerous to your computer security, do this at your own risk__
```
hck-ci ALL=(ALL) NOPASSWD:ALL
```

Devices configuration
---------------------
In the `devices.json` file you will find an array with the available devices for testing, use the following form to add more:
  {
    "name": "QEMU PVPanic Device", // The device name as shown in Windows device manager
    "short": "pvpanic",  // Short name of the device used for logs and artifacts (can be anything)
    "device": { "type": "pvpanic", "name": "pvpanic", "extra": "" } // Devices parameters as used in VirtHCK
    "inf": "pvpanic.inf", // INF file provided with the driver
    "install_method": "PNP", // Use PNP for PlugAndPlay device or NON-PNP for other (installed with rundll32 setupapi.dll)
    "support": false // Use true if there are tests that running on more than one machine (mostly network devices)
    "playlist": [] // List of tests to run (don't use playlist if you want to run all tests)
    "blacklist": [] // List of tests that shouldn't run (when not using playlist)
  },

Platforms
---------
The provided `platforms.json` file is already supplied with all windows version, customize it to your specific needs:
```
  {
    "name": "Win2016x64",
    "kit": "HLK1607", // Name of the kit (used to apply provided playlists)
    "st_image": "HLK1607.qcow2", // Studio images name
    "world_net_device": "e1000e", // QEMU network devices for studio communication
    "ctrl_net_device": "e1000e",
    "file_transfer_device": "e1000e",
    "clients": {
      "c1": {
        "name": "CL1", // Client hostname as configured in the image
        "cpus": "2",
        "memory": "2G",
        "winrm_port": "4002", // Winrm port as configured in the image
        "image": "HLK1607-c1-Win2016x64.qcow2" // Client image name
      },
      "c2": {
        "name": "CL2",
        "cpus": "2",
        "memory": "2G",
        "winrm_port": "4003",
        "image": "HLK1607-c2-Win2016x64.qcow2"
      }
    }
  },
```

Usage
-----

Once everything is installed and configured, run `./bin/auto_hck` with these parameters:
```
Required:
-t, --tag [PROJECT]-[OS][ARCH]   The driver name and architecture
-p, --path [PATH-TO-DRIVER]      The location of the driver
Optional:
-d, --diff <DIFF-LIST-FILE>      Poth to text file containing a list of changed source files
-c, --commit <COMMIT-HASH>       Commit hash for updating github status
-D, --debug                      Printing debug information
```
### Examples
```
./auto_hck -t Balloon-Win10x86 -p /home/hck-ci/balloon/win10/x86
./auto_hck -t NetKVM-Win10x64 -p /home/hck-ci/workspace -d /path/to/diff.txt
./auto_hck -t viostor-Win10x64 -p /home/hck-ci/viostor -d /path/to/diff.txt -c ec3da560827922e5a82486cf19cd9c27e95455a9
